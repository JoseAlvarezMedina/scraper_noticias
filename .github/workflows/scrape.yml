# .github/workflows/scrape.yml
name: Scrapy every 6h

# Para poder hacer push de los resultados
permissions:
  contents: write

on:
  schedule:
    - cron:  '0 */6 * * *'   # cada 6 horas (UTC)
  workflow_dispatch:         # permite dispararlo manualmente

jobs:
  build-and-run:
    runs-on: ubuntu-latest

    steps:
      # 1) Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          fetch-depth: 0

      # 2) Configurar Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # 3) Instalar dependencias
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4) Ejecutar Scrapy
      - name: Run scraper
        run: |
          scrapy crawl titulares

      # 5) Commit & Push de los datos generados
      - name: Commit and push results
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configura git para el bot
          git config user.name "github-actions[bot]"
          git config user.email "actions@github.com"

          # Apunta el remote al token para poder push
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

          # A√±ade solo los archivos de datos
          git add noticias.csv noticias.db

          # Commit si hay cambios
          git commit -m "ü§ñ Actualizaci√≥n autom√°tica de scraping $(date -u +'%Y-%m-%dT%H:%M:%SZ')" || echo "No hay cambios que commitear"

          # Env√≠a a main
          git push origin HEAD:main
